"""
나이트의 이동 - 실버 3(https://www.acmicpc.net/problem/33613)
bfs로 이동한 위치를 저장하고 하나씩 빼면서 갈 수 있는 위치 다시 저장.
방문한 곳은 저장해서 중복 처리 방지.

시간 초과가 발생해서 확인해보니 갈 수 있는 곳은 확정되어져 있음.
공간이 4 * 4 이상만 되면 자신이 시작한 격자판의 색깔과 같은 색의 격자를 모두 갈 수 있게됨.
공간이 3 * 3 이라면 중간 시작만 아니라면 4군데 이동 가능, 중간은 자기 자리만 -> 1

격자판의 (0, 0) 위치는 무조건 검은색이라고 가정하고 진행.
검은색은 항상 흰색보다 격자가 1개 더 많음.
-> y + x 가 짝수라면 검은색, 홀수라면 흰색
"""


N = int(input())
init = tuple(map(int, input().split()))

if N == 3:
    count = 1 if init == (2, 2) else 4
else:
    if N % 2 == 0:
        count = N**2 // 2
    else:
        count = N // 2 * (N + 1)
        # 검은색 위에 있다면
        if (init[0] + init[1]) % 2 == 0:
            count += 1

print(count)